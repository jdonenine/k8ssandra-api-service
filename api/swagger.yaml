openapi: 3.0.0
info:
  title: K8ssandra Cluster API
  description: A RESTful service providing control and visibility into a K8ssandra cluster.
  version: 0.1.0
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: '/v1'
paths:
  /auth/token:
    get:
      tags:
        - Auth
      summary: Retrieve an auth token.
      description: Auth tokens are required for access to many APIs, authenticate with this API to retrieve a new token.
      operationId: getToken
      security:
        - basicAuth: []
      responses:
        '200':
          description: Successful operation
          content:
            text/plain:
              schema:
                type: string
                example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2MTgzODI2MzEsImlzcyI6Ims4c3NhbmRyYS1hcGktc2VydmljZSIsInN1YiI6Ims4c3NhbmRyYS1jYXNzYW5kcmEtY2x1c3Rlci1zdXBlcnVzZXIifQ.DOP8C3xRxjC5QAcB3D24c4pZOjBnE4OmPWI1F9mp6Lg
        '401':
          description: Authentication information is missing or invalid.
        '5XX':
          description: Unexpected error.
  /cassandra-datacenters/:
    get:
      tags:
        - CassandraDatacenters
      summary: Get Cassandra Datacenters.
      operationId: getCassandraDatacenters
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceList'
  /cassandra-datacenters/{cassdc-name}:
    get:
      tags:
        - CassandraDatacenters
      summary: Get a Cassandra Datacenter by name.
      operationId: getCassandraDatacenterByName
      security:
        - bearerAuth: []
      parameters:
        - name: cassdc-name
          in: path
          description: CassandraDatacenter Name
          required: true
          schema:
            type: string
            example: dc1
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
        '404':
          description: CassandraDatacenter Not Found
  /cassandra-datacenters/{cassdc-name}/statefulsets:
    get:
      tags:
        - CassandraDatacenters
      summary: Get all StatefulSets deployed on behalf of a given Cassandra Datacenter.
      operationId: getCassandraDatacenterStatefulSets
      security:
        - bearerAuth: []
      parameters:
        - name: cassdc-name
          in: path
          description: CassandraDatacenter Name
          required: true
          schema:
            type: string
            example: dc1
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceList'
        '404':
          description: CassandraDatacenter Not Found
  /stateful-sets/{ss-name}:
    get:
      tags:
        - StatefulSets
      summary: Get a StatefulSets by name.
      operationId: getStatefulSetByName
      security:
        - bearerAuth: []
      parameters:
        - name: ss-name
          in: path
          description: StatefulSet Name
          required: true
          schema:
            type: string
            example: dc1
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
        '404':
          description: StatefulSet Not Found
components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    WrapperMetadata:
      type: object
      properties:
        total:
          type: integer
        count:
          type: integer
    CassandraDatacentersWrapper:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/WrapperMetadata'
        items:
          type: array
          items:
            $ref: '#/components/schemas/CassandraDatacenter'
    CassandraDatacenter:
      type: object
      properties:
        apiVersion:
          type: string
        kind:
          type: string
        metadata:
          $ref: '#/components/schemas/ResourceMetadata'
        status:
          $ref: '#/components/schemas/CassandraDatacenterStatus'
        spec:
          $ref: '#/components/schemas/CassandraDatacenterSpec'
    StatefulSetsWrapper:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/WrapperMetadata'
        items:
          type: array
          items:
            $ref: '#/components/schemas/StatefulSet'
    StatefulSet:
      type: object
      properties:
        name:
          type: string
        apiVersion:
          type: string
        kind:
          type: string
        metadata:
          $ref: '#/components/schemas/ResourceMetadata'
    CassandraDatacenterSpec:
      type: object
      properties:
        clusterName:
          type: string
        size:
          type: integer
        serverImage:
          type: string
        serverType:
          type: string
        serverVersion:
          type: string
        dockerImageRunsAsCassandra:
          type: boolean
    CassandraDatacenterStatus:
      type: object
      properties:
        cassandraOperatorProgress:
          type: string
        lastServerNodeStarted:
          type: string
          format: date-time
        conditions:
          type: array
          items:
            $ref: '#/components/schemas/StatusCondition'
    ResourceOwnerReference:
      type: object
      properties:
        apiVersion:
          type: string
        kind:
          type: string
        name:
          type: string
        uid:
          type: string
    Resource:
      type: object
      properties:
        apiVersion:
          type: string
        kind:
          type: string
        metadata:
          type: object
        spec:
          type: object
        status:
          type: object
    ResourceList:
      type: object
      properties:
        apiVersion:
          type: string
        kind:
          type: string
        items:
          type: array
          items:
            $ref:  '#/components/schemas/Resource'
        metadata:
          type: object
          properties:
            selfLink:
              type: string
            resourceVersion:
              type: integer
              format: int64
        
    ResourceMetadata:
      type: object
      properties:
        name:
          type: string
        namespace:
          type: string
        selfLink:
          type: string
        generation:
          type: integer
        annotations:
          type: object
          additionalProperties:
            type: string
        labels:
          type: object
          additionalProperties:
            type: string
        ownerReferences:
          type: array
          items:
            $ref: '#/components/schemas/ResourceOwnerReference'
    StatusCondition:
      type: object
      properties:
        lastTransitionTime:
          type: string
          format: date-time
        message:
          type: string
        reason:
          type: string
        status:
          type: string
        type:
          type: string
